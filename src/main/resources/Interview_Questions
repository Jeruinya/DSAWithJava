Mockito-->
https://www.baeldung.com/mockito-seriessd
https://github.com/eugenp/tutorials/tree/master/testing-modules/mockito/src/test/java/com/baeldung/mockito





Interview Questions----------->

1-What is SOLID design principle?--https://www.baeldung.com/solid-principles
2-What is the difference between TDD and BDD?--https://www.geeksforgeeks.org/difference-between-bdd-vs-tdd-in-software-engineering/
3-How to convert List of integers to Set of Integers using java 8 streaming?
	Set<Integer> s=list.stream().collect(Collectors.toSet())

4-Retrival is fast in SQL or NOSql?
5-How to break a monolith application into microservices?--https://www.youtube.com/watch?v=tuJqH3AV0e8
6-MongoDb ---https://www.youtube.com/watch?v=t4wPUQ5RElY&t=127s          https://www.youtube.com/watch?v=oSIv-E60NiU
7-What is 4-eyes principle
8-Which is not valid JPM message type:1-TextMessager  2-ObjectMessage  3-FileMessage  4-mapMessage---Ans:ObjectMessage
9-Authentication Vs Authorization.
10-What are valid RetentionPolicy forannotation->RetentionPolicy.CLASS,RetentionPolicy.SOURCE,RetentionPolicy.RUNTIME
11-What is the difference between PUT and POST?
	PUT and POST can be used to create resources, there are significant differences between them in terms of their intended applications.
	PUT HTTP Request
	PUT is a request method supported by HTTP used by the World Wide Web. The PUT method requests that the enclosed entity be stored under the supplied URI. 
	If the URI refers to an already existing resource, it is modified and if the URI does not point to an existing resource, then the server can create the 
	resource with that URI. 
	
	Example:
	@PutMapping("/addresses/{id}")
    Address replaceEmployee(@RequestBody Address newAddress, @PathVariable Long id) {

        return repository.findById(id)
            .map(address -> {
                address.setCity(newAddress.getCity());
                address.setPin(newAddress.getPostalCode());
                return repository.save(address);
            })
            .orElseGet(() -> {
                return repository.save(newAddress);
            });
    }
	
	
	POST HTTP Request:

	POST is a request method supported by HTTP used by the World Wide Web. By design, the POST request method requests that 
	a web server accepts the data enclosed in the body of the request message, most likely for storing it. It is often used 
	when uploading a file or when submitting a completed web form. 
	
	@PostMapping("/addresses")
    Address createNewAddress(@RequestBody Address newAddress) {
        return repository.save(newAddress);
    }
	
	-->PUT method is idempotent. So if you send retry a request multiple times, that should be equivalent to single request modification.
	-->POST is NOT idempotent. So if you retry the request N times, you will end up having N resources with N different URIs created on server.
	
	-->Use PUT when you want to modify a single resource which is already a part of resources collection. 
	   PUT overwrites the resource in its entirety. Use PATCH if request updates part of the resource. 	   
	-->Use POST when you want to add a child resource under resources collection.
	
	-->Generally, in practice, always use PUT for UPDATE operations.
	-->Always use POST for CREATE operations.
	
	
12-@PathVariable vs @RequestParam vs @QueryParam vs @PathParam?

	@PathVariable(Springboot) or @PathParam(Rest API):PathVariables extract values from the URI path	
		@GetMapping("/foos/{id}")
		@ResponseBody
		public String getFooById(@PathVariable(required = false) String id) {
			return "ID: " + id;
		}
		Then we can map based on the path:
		http://localhost:8080/foos/abc
		----
		ID: abc
		http://localhost:8080/foos
		----
		ID: null

	@RequestParam(Springboot) or @QueryParam(Rest API): RequestParams extract values from the query string
	annotation's attributes: name, value, required, and defaultValue.
	
		@GetMapping("/foos")
		@ResponseBody
		public String getFooByIdUsingQueryParam(@RequestParam String id) {
			return "ID: " + id;
		}
		which would give us the same response, just a different URI:

		http://localhost:8080/foos?id=abc
		----
		ID: abc
		
		
		A single @RequestParam can have multiple values:

		@GetMapping("/api/foos")
		@ResponseBody
		public String getFoos(@RequestParam List<String> id) {
			return "IDs are " + id;
		}
			http://localhost:8080/api/foos?id=1,2,3        Or http://localhost:8080/api/foos?id=1 & name="Raju"
			----
			IDs are [1,2,3]
	
13-Difference between collection and Stream?	

	Collection:
		-->It stores/holds all the data that the data structure currently has in a particular data structure like Set, List or Map.
		-->They don’t use functional interfaces.
		-->They are non-consumable i.e; can be traversable multiple times without creating it again.
		-->It supports parallel processing and parallel processing can be very helpful in achieving high performance.
		-->Specific classes for primitive types such as IntStream, LongStream, and DoubleStream are used in collections since primitive data types such as int, 
		   long in the collections using auto-boxing and these operations could take a lot of time.
		-->These are modifiable i.e one can easily add to or remove elements from collections
		-->Collections are iterated externally using loops.
	
	Stream:
	
		-->It doesn’t store data, it operates on the source data structure i.e collection.
		-->They use functional interfaces like lambda which makes it a good fit for programming language.
		-->Java Streams are consumable i.e; to traverse the stream, it needs to be created every time.
		-->Java streams support both sequential and parallel processing.
		-->All the Java stream API interfaces and classes are in java.util.stream package.
		-->Streams are not modifiable i.e one can’t add or remove elements from streams.
		-->Streams are iterated internally by just mentioning the operations.
		
14-What are HTTP methods?--->GET,PUT ,POST ,DELETE, HEAD,OPTIONS,CONNECR,TRACE

15-What is the difference between @Controller and @RestController?
	It's a convenient annotation that combines @Controller and @ResponseBody, which eliminates the need to annotate every request 
	handling method of the controller class with the @ResponseBody annotation.
			@RestController
			@RequestMapping("books-rest")
			public class SimpleBookRestController {
				
				@GetMapping("/{id}", produces = "application/json")
				public Book getBook(@PathVariable int id) {
					return findBookById(id);
				}

				private Book findBookById(int id) {
					// ...
				}
			}

16-what is the difference between URL and URI?
	Uniform Resource Identifier (URI) − a sequence of characters that allows the complete identification of any abstract or physical resource
	Uniform Resource Locator (URL) − a subset of URI that, in addition to identifying where a resource is available, describes the primary mechanism to access it


	Syntax:
	Every URI, regardless if it's a URL or not, follows a particular form:
	scheme:[//authority][/path][?query][#fragment]
	Where each part is described as follows:
		scheme − for URLs, is the name of the protocol used to access the resource, for other URIs, is a name that refers to a specification for assigning identifiers within that scheme
		authority − an optional part comprised of user authentication information, a host and an optional port
		path − it serves to identify a resource within the scope of its scheme and authority
		query − additional data that, along with the path, serves to identify a resource. For URLs, this is the query string
		fragment − an optional identifier to a specific part of the resource


		ftp://ftp.is.co.za/rfc/rfc1808.txt
		https://tools.ietf.org/html/rfc3986
		mailto:john@doe.com

		tel:+1-816-555-1212
		urn:oasis:names:docbook:dtd:xml:4.1
		urn:isbn:1234567890

17-What is the difference between HTTP and HTTPS















                      Spring 
==========================================
https://www.interviewbit.com/spring-boot-interview-questions/
What is Spring boot?
Sprint boot is a Java-based spring framework used for Rapid Application Development (to build stand-alone microservices).
It has extra support of auto-configuration and embedded application server like tomcat, jetty, etc.

Features of Spring Boot that make it different?

Creates stand-alone spring application with minimal configuration needed.
It has embedded tomcat, jetty which makes it just code and run the application.
Provide production-ready features such as metrics, health checks, and externalized configuration.
Absolutely no requirement for XML configuration.

1. What are the advantages of using Spring Boot?
  The advantages of Spring Boot are listed below:

	->Easy to understand and develop spring applications.
	->Spring Boot is nothing but an existing framework with the addition of an embedded HTTP server and annotation configuration
	  which makes it easier to understand and faster the process of development.
	->Increases productivity and reduces development time.
	->Minimum configuration.
	->We don’t need to write any XML configuration, only a few annotations are required to do the configuration.
	
2. What are the Spring Boot key components?
Below are the four key components of spring-boot:

	->Spring Boot auto-configuration.
	->Spring Boot CLI.
	->Spring Boot starter POMs.
	->Spring Boot Actuators.
	
3. Why Spring Boot over Spring?
Below are some key points which spring boot offers but spring doesn’t:

	->Starter POM.
	->Version Management.
	->Auto Configuration.
	->Component Scanning.
	->Embedded server.
	->InMemory DB.
	->Actuators
	
4.What is the starter dependency of the Spring boot module?
Spring boot provides numbers of starter dependency, here are the most commonly used -

	->Data JPA starter.
	->Test Starter.
	->Security starter.
	->Web starter.
	->Mail starter.
	->Thymeleaf starter.
	
8.How does a spring boot application get started?
	Just like any other Java program, a Spring Boot application must have a main method. 
	This method serves as an entry point, which invokes the SpringApplication#run method to bootstrap the application.
	
9.What are starter dependencies?
	Spring boot starter is a maven template that contains a collection of all the relevant transitive dependencies 
	that are needed to start a particular functionality.
	Like we need to import spring-boot-starter-web dependency for creating a web application.
	<dependency>
	<groupId> org.springframework.boot</groupId>
	<artifactId> spring-boot-starter-web </artifactId>
	</dependency>
	
	
10.What is Spring Initializer?
	Spring Initializer is a web application that helps you to create an initial spring boot project structure and provides 
	a maven or gradle file to build your code. It solves the problem of setting up a framework when you are starting a project from scratch.

11.What is Spring Boot CLI and what are its benefits?
	Spring Boot CLI is a command-line interface that allows you to create a spring-based java application using Groovy.
	Example:
		You don’t need to create getter and setter method or access modifier, return statement. If you use the JDBC template, it automatically loads for you.
		
12.What are the most common Spring Boot CLI commands?
	-run, -test, -grap, -jar, -war, -install, -uninstall, --init, -shell, -help.
	To check the description, run spring --help from the terminal.
	
13.What Are the Basic Annotations that Spring Boot Offers?
The primary annotations that Spring Boot offers reside in its org.springframework.boot.autoconfigure and its sub-packages. Here are a couple of basic ones:
	@EnableAutoConfiguration – to make Spring Boot look for auto-configuration beans on its classpath and automatically apply them.
	@SpringBootApplication – used to denote the main class of a Boot Application. 
	This annotation combines @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations with their default attributes.
	
	@EnableTransactionManagement
	@EnableAsync
	@EnableScheduling
	@EnableLogging
	
	On top of controller class use annotation-->@RestController
	Method level annotations-->
		@PostMapping("uri")
		@GetMapping("uri")
		@RequestHeader("header")
		@RequestBody(..)
		@RequestParam..

	Exception Annotation--->
	@ExceptionHandler
	Service class Annotation--->
	@Service
	Configuration annotation-->
	@EnableConfigurationProperties
	@Bean


14.What is Spring Boot dependency management?
	Spring Boot dependency management is used to manage dependencies and configuration automatically 
	without you specifying the version for any of that dependencies.
	
15.Can we create a non-web application in Spring Boot?
	Yes, we can create a non-web application by removing the web dependencies from the classpath along with changing 
	the way Spring Boot creates the application context.


16.Is it possible to change the port of the embedded Tomcat server in Spring Boot?
	Yes, it is possible. By using the server.port in the application.properties.

17.What is the default port of tomcat in spring boot?
	The default port of the tomcat server-id 8080. It can be changed by adding sever.port properties in the application.property file.

18.Can we override or replace the Embedded tomcat server in Spring Boot?
	Yes, we can replace the Embedded Tomcat server with any server by using the Starter dependency in the pom.xml file. Like you can use spring-boot-starter-jetty as a dependency for using a jetty server in your project.

19.Can we disable the default web server in the Spring boot application?
	Yes, we can use application.properties to configure the web application type i.e spring.main.web-application-type=none.


20.How to disable a specific auto-configuration class?
	You can use exclude attribute of @EnableAutoConfiguration if you want auto-configuration not to apply to any specific class.
	//use of exclude
	@EnableAutoConfiguration(exclude={className})
	
21.Explain @RestController annotation in Sprint boot?
 It is a combination of @Controller and @ResponseBody, used for creating a restful controller. It converts the response to JSON or XML. 
 It ensures that data returned by each method will be written straight into the response body instead of returning a template.

22.What is the difference between @RestController and @Controller in Spring Boot?
	@Controller Map of the model object to view or template and make it human readable but @RestController simply 
	returns the object and object data is directly written in HTTP response as JSON or XML.

23.Describe the flow of HTTPS requests through the Spring Boot application?
	On a high-level spring boot application follow the MVC pattern which is depicted in the below flow diagram.
	Spring Boot Flow Architecture

24.What is the difference between RequestMapping and GetMapping?
	RequestMapping can be used with GET, POST, PUT, and many other request methods using the method attribute on the annotation. 
	Whereas getMapping is only an extension of RequestMapping which helps you to improve on clarity on request.

25.What is the use of Profiles in spring boot?
	While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment 
	requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, 
	we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different.
	To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.

26.What is Spring Actuator? What are its advantages?
	An actuator is an additional feature of Spring that helps you to monitor and manage your application when 
	you push it to production. These actuators include auditing, health, CPU usage, HTTP hits, and metric gathering, 
	and many more that are automatically applied to your application.

27.How to enable Actuator in Spring boot application?
	To enable the spring actuator feature, we need to add the dependency of “spring-boot-starter-actuator” in pom.xml.
		<dependency>
		<groupId> org.springframework.boot</groupId>
		<artifactId> spring-boot-starter-actuator </artifactId>
		</dependency>


28.What are the actuator-provided endpoints used for monitoring the Spring boot application?
	Actuators provide below pre-defined endpoints to monitor our application -
		Health
		Info
		Beans
		Mappings
		Configprops
		Httptrace
		Heapdump
		Threaddump
		Shutdown

29.How to get the list of all the beans in your Spring boot application?
	Spring Boot actuator “/Beans” is used to get the list of all the spring beans in your application.

30.How to check the environment properties in your Spring boot application?
	Spring Boot actuator “/env” returns the list of all the environment properties of running the spring boot application.

31.How to enable debugging log in the spring boot application?
	Debugging logs can be enabled in three ways -
	We can start the application with --debug switch.
	We can set the logging.level.root=debug property in application.property file.
	We can set the logging level of the root logger to debug in the supplied logging configuration file.

32.Where do we define properties in the Spring Boot application?
	You can define both application and Spring boot-related properties into a file called application.properties.
	You can create this file manually or use Spring Initializer to create this file. 
	You don’t need to do any special configuration to instruct Spring Boot to load this file, 
	If it exists in classpath then spring boot automatically loads it and configure itself and the application code accordingly.

33.What is dependency Injection?
	The process of injecting dependent bean objects into target bean objects is called dependency injection.

	->Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method.
	->Constructor Injection: The IOC container will inject the dependent bean object into the target bean object by calling the target bean constructor.
	->Field Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API.
	
	
34. What is an IOC container?
	IoC Container is a framework for implementing automatic dependency injection. 
	It manages object creation and its life-time and also injects dependencies into the class.

	
35.How to Deploy Spring Boot Web Applications as Jar and War Files?
	Traditionally, we package a web application as a WAR file and then deploy it into an external server. 
	Doing this allows us to arrange multiple applications on the same server. When CPU and memory were scarce, this was a great way to save resources.
	But things have changed. Computer hardware is fairly cheap now, and the attention has turned to server configuration. 
	A small mistake in configuring the server during deployment may lead to catastrophic consequences.
	Spring tackles this problem by providing a plugin, namely spring-boot-maven-plugin, to package a web application as an executable JAR.
	To include this plugin, just add a plugin element to pom.xml:

	<plugin>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-maven-plugin</artifactId>
	</plugin>
	With this plugin in place, we'll get a fat JAR after executing the package phase. This JAR contains all the necessary dependencies, including an embedded server. So, we no longer need to worry about configuring an external server.
	We can then run the application just like we would an ordinary executable JAR.
	Notice that the packaging element in the pom.xml file must be set to jar to build a JAR file:
	<packaging>jar</packaging>
	If we don't include this element, it also defaults to jar.
	
	To build a WAR file, we change the packaging element to war:
	<packaging>war</packaging>
	and leave the container dependency off the packaged file:

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-tomcat</artifactId>
		<scope>provided</scope>
	</dependency>
	After executing the Maven package phase, we'll have a deployable WAR file.


36.What Does It Mean That Spring Boot Supports Relaxed Binding?
	Relaxed binding in Spring Boot is applicable to the type-safe binding of configuration properties.
	With relaxed binding, the key of a property doesn't need to be an exact match of a property name. 
	Such an environment property can be written in camelCase, kebab-case, snake_case, or in uppercase with words separated by underscores.
	For example, if a property in a bean class with the @ConfigurationProperties annotation is named myProp, 
	it can be bound to any of these environment properties: myProp, my-prop, my_prop, or MY_PROP.
	
37.Which Is Better to Configure a Spring Boot Project — Properties or YAML?
	YAML offers many advantages over properties files:
		->More clarity and better readability
		->Perfect for hierarchical configuration data, which is also represented in a better, more readable format
		->Support for maps, lists and scalar types
		->Can include several profiles in the same file (since Spring Boot 2.4.0, this is possible for properties files too)
		However, writing it can be a little difficult and error-prone due to its indentation rules.

	For details and working samples, please refer to our Spring YAML vs Properties tutorial.


38.Explain what is thymeleaf and how to use thymeleaf?
	Thymeleaf is a server-side Java template engine used for web applications. 
	It aims to bring natural template for your web application and can integrate well with Spring Framework and HTML5 Java web applications. 
	To use Thymeleaf, you need to add the following code in the pom.xml file:
		<dependency>    
		<groupId>org.springframework.boot</groupId>    
		<artifactId>spring-boot-starter-thymeleaf</artifactId>    
		</dependency>  



Question-1:What is bean life cycle?

Question-2:what is bean autowiring?

Question-3:what is difference between setter injection and constructor injection?

Question-4:what is IOC?

Question-5:what is difference between IOC & DI?

Question-6:how many type of injections are there in spring?

Question-7:what is component scan? how to enable this?

Question-8:what is bean scope?how many types of scope are there in spring?

Question-9:what is difference between singleton & prototype,session & global session,request & prototype?

Question-10:if a prototype bean define in singleton bean then how you will get mulltiple instances of prototype bean?(Ans-method injection)

Question-11:Tell the architecture of MVC?

Question-12:why MVC is introduced?

Question-13:what are controllers in spring?

Question-14:what is DispatcherServlet?

Question-15:what is HandlerMapping?

Question-16:what is ViewResolver?



============================================================================================================================================================

                                  Hibernate(https://www.interviewbit.com/hibernate-interview-questions/)
                       ================================

1. What is ORM in Hibernate?
Hibernate ORM stands for Object Relational Mapping. This is a mapping tool pattern mainly used for converting data stored in a relational database to an object used in object-oriented programming constructs. This tool also helps greatly in simplifying data retrieval, creation, and manipulation.




Question-1:why hibernate introduced?

Question-2:learn well HQL, Criteria,and Native SQL?

Question-3:what is life cycle of object in hibernate?

Question-4:what are the inheritance strategies?

Question-5:what is diff between save() & persist()?

Question-6:what is diff between update() & merge()?

Question-7:what is diff between save() & flush()?

Question-8:Tell the steps to write hibernate application?

Question-9:write configuration file?

Question-10:write mapping file?

Question-11:what is caching in hibernate?how many types of it?

Question-12:how to call a procedurein hibernate?

Question-13:what is page nation?

Question-14:what is composit key?how to create it in hibernate?

Question-15:what is n+1 problem?

Question-16:what are fetching strategies in hibernate?

Question-17:what is inverse attribute?

Question-18:Learn joins like inner join,outer join.left join & right join?


Database--https://www.geeksforgeeks.org/sql-interview-questions/


select * from(select ename, sal, dense_rank() over(order by sal desc)r from Employee) where r=&n;

SELECT * FROM (SELECT e.*, ROW_NUMBER() OVER (ORDER BY sal DESC) rn FROM Emp e ) WHERE rn = n;

Select MAX(SAL) from (Select * from (Select * from EMP order by SAL Desc) where rownum <= n)