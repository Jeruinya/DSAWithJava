package com.scaler.dsa.recursion;

import java.util.ArrayList;
import java.util.List;

/*
Problem Description
On the first row, we write a 0. Now in every subsequent row, we look at the previous row and 
replace each occurrence of 0 with 01, and each occurrence of 1 with 10.
Given row number A and index B, return the Bth indexed symbol in row A. (The values of B are 1-indexed.).

Problem Constraints
1 <= A <= 20
1 <= B <= 2A - 1
Input Format
First argument is an integer A.
Second argument is an integer B.

Output Format
Return an integer denoting the Bth indexed symbol in row A.

Input 1:
 A = 2
 B = 1
Input 2:
 A = 2
 B = 2

Output 1: 0
Output 2: 1

Explanation 1:
 Row 1: 0
 Row 2: 01
Explanation 2:
 Row 1: 0
 Row 2: 01

First row is 0. each next row is generated by replacing all 0-->0, 1  and 1-->1, 0
Given n and k find the kth character in the nth row.

	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1:  0
2:	0 1
3:	0 1 1 0
4:  0 1 1 0 1 0 0 1	
5:  0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0

Find kth char in nth row, means go to nth row and then go to kth char that is our answer.

Lets solve using recursion---->
Observation 1:
	0  parent 				1 parent
 0		1   			1		0
 parent =left child
 left child =parent
 right child =~parent
 
 Observation 2:Parent is in the row just above the child.
 

Observation 3:
 
	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
...............................................................
1:  0
2:	0 1
3:	0 1 1 0
4:  0 1 1 0 1 0 0 1	
	0 1 2 3 4 5 6 7		this is the index of child 
How to find parent? 
who is 0th parent of 0th index child the answer is child index/2

child index			parent index
0		 				0
1						0
2						1
3						1
4						2
5						2

 
parent =child/2   

if child is  nth row and  and kth index then row of parent is n-1 and index of the parent in k/2

All the left children are at even indexes and all the right children at odd indexes
 
Observation 4: if k is even then its left child and if k is odd then its right child
 
 
 */
public class FindKthCharInNThRow {

	public static void main(String[] args) {
		int n = 5, k = 8;
		System.out.println(findKthCharNaive(5, k));
		System.out.println(findKthCharacterInNthRow(n, k));

	}

	// TC-O(n*2^n)
	private static int findKthCharNaive(int n, int k) {
		List<Integer> res = new ArrayList<>();
		res.add(0);
		res.add(1);

		for (int i = 2; i < n; i++) {
			List<Integer> list = new ArrayList<Integer>();
			for (int x : res) {
				if (x == 0) {
					list.add(0);
					list.add(1);
				} else {
					list.add(1);
					list.add(0);
				}
			}
			res = list;
		}
		return res.get(k - 1);
	}

	private static int findKthCharacterInNthRow(int n, int k) {
		if (n == 1)
			return 0;
		int par = findKthCharacterInNthRow(n - 1, (k + 1) / 2);
		if (k % 2 == 1)
			return par;
		else
			return 1 - par;
	}

	public int solve(int A, int B) {
        return solveQ(A, B) ? 1 : 0;
    }
    static boolean solveQ(int n, int k) {

        if (n == 1 && k == 1)
            return false;

        int mid = (int) Math.pow(2, n - 1) / 2;

        if (k <= mid)
            return solveQ(n - 1, k);
        else
            return !solveQ(n - 1, k - mid);
    }

}
