package com.scaler.dsa.recursion;

/*
Find kth character.
First row is 0. each next row is generated by relplacing all 0-->0, 1  and 1-->1, 0
Given n and k find the kth character in the nth row.

	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1:  0
2:	0 1
3:	0 1 1 0
4:  0 1 1 0 1 0 0 1	
5:  0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0

Lets solve using recursion---->
Observation 1:
	0  parent 				1 parent
 0		1   			1		0
 parent =left child
 right child =~parent
 
 Observation 2:Parent is in the row just above the child
 Observation 3: parent =child/2   
 child==> n and k 
 parent n-1, k/2
 
Observation 4: if k is even , left child k is odd, right child
 
 
 */
public class FindKthCharInNThRow {

	public static void main(String[] args) {
		int n = 4, k = 7;
		int res = findKthCharacterInNthRow(n, k);
		System.out.println(res);

	}

	private static int findKthCharacterInNthRow(int n, int k) {
		if (n == 1)
			return 0;
		int par = findKthCharacterInNthRow(n - 1, (k+1)/ 2);
		if (k % 2 == 1)
			return par;
		else
			return 1-par;
	}

}
